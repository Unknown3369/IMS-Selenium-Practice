{"name": "Login to IMS Application", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff608062605+51877]\n\tGetHandleVerifier [0x0x7ff608062664+51972]\n\tGetHandleVerifier [0x0x7ff608218bf5+1847445]\n\t(No symbol) [0x0x7ff607e2045b]\n\t(No symbol) [0x0x7ff607e2071b]\n\t(No symbol) [0x0x7ff607e61927]\n\t(No symbol) [0x0x7ff607e4216f]\n\t(No symbol) [0x0x7ff607e1667b]\n\t(No symbol) [0x0x7ff607e5f3d2]\n\t(No symbol) [0x0x7ff607e41df3]\n\t(No symbol) [0x0x7ff607e15b36]\n\t(No symbol) [0x0x7ff607e14d80]\n\t(No symbol) [0x0x7ff607e15973]\n\t(No symbol) [0x0x7ff607ede4a5]\n\t(No symbol) [0x0x7ff607eda75d]\n\tGetHandleVerifier [0x0x7ff60808ce43+226019]\n\tGetHandleVerifier [0x0x7ff60807c011+156849]\n\tGetHandleVerifier [0x0x7ff608084509+190889]\n\tGetHandleVerifier [0x0x7ff608069744+80868]\n\tGetHandleVerifier [0x0x7ff608069893+81203]\n\tGetHandleVerifier [0x0x7ff608057e16+8886]\n\tBaseThreadInitThunk [0x0x7ffc3a9be8d7+23]\n\tRtlUserThreadStart [0x0x7ffc3b74c53c+44]", "trace": "driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"69fc81d9ed0a9d835f684cea793a0b51\")>\n\n    @allure.title(\"Login to IMS Application\")\n    @allure.description(\"This test logs into the IMS application using valid credentials and verifies the dashboard.\")\n    def test_login_to_ims(driver):\n       \"\"\"Login test using pytest fixture for driver\"\"\"\n       login_page = login(driver)\n       login_page.perform_login(\"Testuser\", \"Test@1239994\")\n       print(\"Login process completed.\")\n       wait = WebDriverWait(driver, 30)\n>      wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@id='Date']\")))\n\nPYTEST\\tests\\login_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69fc81d9ed0a9d835f684cea793a0b51\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001EB0F9A7A60>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff608062605+51877]\nE       \tGetHandleVerifier [0x0x7ff608062664+51972]\nE       \tGetHandleVerifier [0x0x7ff608218bf5+1847445]\nE       \t(No symbol) [0x0x7ff607e2045b]\nE       \t(No symbol) [0x0x7ff607e2071b]\nE       \t(No symbol) [0x0x7ff607e61927]\nE       \t(No symbol) [0x0x7ff607e4216f]\nE       \t(No symbol) [0x0x7ff607e1667b]\nE       \t(No symbol) [0x0x7ff607e5f3d2]\nE       \t(No symbol) [0x0x7ff607e41df3]\nE       \t(No symbol) [0x0x7ff607e15b36]\nE       \t(No symbol) [0x0x7ff607e14d80]\nE       \t(No symbol) [0x0x7ff607e15973]\nE       \t(No symbol) [0x0x7ff607ede4a5]\nE       \t(No symbol) [0x0x7ff607eda75d]\nE       \tGetHandleVerifier [0x0x7ff60808ce43+226019]\nE       \tGetHandleVerifier [0x0x7ff60807c011+156849]\nE       \tGetHandleVerifier [0x0x7ff608084509+190889]\nE       \tGetHandleVerifier [0x0x7ff608069744+80868]\nE       \tGetHandleVerifier [0x0x7ff608069893+81203]\nE       \tGetHandleVerifier [0x0x7ff608057e16+8886]\nE       \tBaseThreadInitThunk [0x0x7ffc3a9be8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffc3b74c53c+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "This test logs into the IMS application using valid credentials and verifies the dashboard.", "attachments": [{"name": "Screenshot_test_login_to_ims", "source": "38d9eaaf-a88e-43f0-a017-cc5ba3d8a10e-attachment.png", "type": "image/png"}], "start": 1761713340909, "stop": 1761713395007, "uuid": "a176e796-70be-4710-9e89-c0e27e0edffe", "historyId": "0db2bcecff7ac2a81a4d624df58e63e1", "testCaseId": "0db2bcecff7ac2a81a4d624df58e63e1", "fullName": "PYTEST.tests.login_test#test_login_to_ims", "labels": [{"name": "parentSuite", "value": "PYTEST.tests"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "UnKnown"}, {"name": "thread", "value": "13632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PYTEST.tests.login_test"}], "titlePath": ["PYTEST", "tests", "login_test.py"]}